{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> Importing libraries and reading data files "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import os\n",
    "from math import sin, cos, sqrt, atan2, radians\n",
    "import statsmodels.formula.api as sm\n",
    "from folium import plugins\n",
    "import matplotlib.pylab as plt #Typically matplotlib.pylab is imported as plt (shortened name)\n",
    "%matplotlib inline \n",
    "#The above line is necessary so that figures are displayed on the webpage instead of separate pop-ups\n",
    "import seaborn as sns\n",
    "import time\n",
    "import folium"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing last 4 years Divvy data\n",
    "data=pd.read_csv('datanew.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "scrolled": true
   },
   "source": [
    "# Data Cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unnamed: 0           0\n",
       "trip_id              0\n",
       "year                 0\n",
       "month                0\n",
       "week                 0\n",
       "day                  0\n",
       "hour                 0\n",
       "usertype             0\n",
       "gender               0\n",
       "starttime            0\n",
       "stoptime             0\n",
       "tripduration         0\n",
       "temperature          0\n",
       "events               0\n",
       "from_station_id      0\n",
       "from_station_name    0\n",
       "latitude_start       0\n",
       "longitude_start      0\n",
       "dpcapacity_start     0\n",
       "to_station_id        0\n",
       "to_station_name      0\n",
       "latitude_end         0\n",
       "longitude_end        0\n",
       "dpcapacity_end       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking for null values in the data\n",
    "t0=time.time()\n",
    "data.isnull().sum()\n",
    "#we didn't get any null values in the data, so we can go ahead with this data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>trip_id</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>week</th>\n",
       "      <th>day</th>\n",
       "      <th>hour</th>\n",
       "      <th>usertype</th>\n",
       "      <th>gender</th>\n",
       "      <th>starttime</th>\n",
       "      <th>...</th>\n",
       "      <th>from_station_id</th>\n",
       "      <th>from_station_name</th>\n",
       "      <th>latitude_start</th>\n",
       "      <th>longitude_start</th>\n",
       "      <th>dpcapacity_start</th>\n",
       "      <th>to_station_id</th>\n",
       "      <th>to_station_name</th>\n",
       "      <th>latitude_end</th>\n",
       "      <th>longitude_end</th>\n",
       "      <th>dpcapacity_end</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6537545</td>\n",
       "      <td>13518905</td>\n",
       "      <td>2017</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>23</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>Male</td>\n",
       "      <td>2017-03-31 23:59:07</td>\n",
       "      <td>...</td>\n",
       "      <td>66</td>\n",
       "      <td>Clinton St &amp; Lake St</td>\n",
       "      <td>41.885637</td>\n",
       "      <td>-87.641823</td>\n",
       "      <td>23.0</td>\n",
       "      <td>171</td>\n",
       "      <td>May St &amp; Cullerton St</td>\n",
       "      <td>41.855136</td>\n",
       "      <td>-87.654127</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6537546</td>\n",
       "      <td>13518904</td>\n",
       "      <td>2017</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>23</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>Male</td>\n",
       "      <td>2017-03-31 23:56:25</td>\n",
       "      <td>...</td>\n",
       "      <td>199</td>\n",
       "      <td>Wabash Ave &amp; Grand Ave</td>\n",
       "      <td>41.890912</td>\n",
       "      <td>-87.626804</td>\n",
       "      <td>15.0</td>\n",
       "      <td>26</td>\n",
       "      <td>McClurg Ct &amp; Illinois St</td>\n",
       "      <td>41.891020</td>\n",
       "      <td>-87.617300</td>\n",
       "      <td>31.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6537547</td>\n",
       "      <td>13518903</td>\n",
       "      <td>2017</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>23</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>Female</td>\n",
       "      <td>2017-03-31 23:55:33</td>\n",
       "      <td>...</td>\n",
       "      <td>520</td>\n",
       "      <td>Greenview Ave &amp; Jarvis Ave</td>\n",
       "      <td>42.015962</td>\n",
       "      <td>-87.668570</td>\n",
       "      <td>23.0</td>\n",
       "      <td>432</td>\n",
       "      <td>Clark St &amp; Lunt Ave</td>\n",
       "      <td>42.009074</td>\n",
       "      <td>-87.674190</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6537548</td>\n",
       "      <td>13518902</td>\n",
       "      <td>2017</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>23</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>Male</td>\n",
       "      <td>2017-03-31 23:54:46</td>\n",
       "      <td>...</td>\n",
       "      <td>110</td>\n",
       "      <td>Dearborn St &amp; Erie St</td>\n",
       "      <td>41.893992</td>\n",
       "      <td>-87.629318</td>\n",
       "      <td>23.0</td>\n",
       "      <td>142</td>\n",
       "      <td>McClurg Ct &amp; Erie St</td>\n",
       "      <td>41.894503</td>\n",
       "      <td>-87.617854</td>\n",
       "      <td>31.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6537549</td>\n",
       "      <td>13518901</td>\n",
       "      <td>2017</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>23</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>Female</td>\n",
       "      <td>2017-03-31 23:53:33</td>\n",
       "      <td>...</td>\n",
       "      <td>327</td>\n",
       "      <td>Sheffield Ave &amp; Webster Ave</td>\n",
       "      <td>41.921540</td>\n",
       "      <td>-87.653818</td>\n",
       "      <td>19.0</td>\n",
       "      <td>331</td>\n",
       "      <td>Halsted St &amp; Blackhawk St (*)</td>\n",
       "      <td>41.908537</td>\n",
       "      <td>-87.648627</td>\n",
       "      <td>20.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0   trip_id  year  month  week  day  hour    usertype  gender  \\\n",
       "0     6537545  13518905  2017      3    13    4    23  Subscriber    Male   \n",
       "1     6537546  13518904  2017      3    13    4    23  Subscriber    Male   \n",
       "2     6537547  13518903  2017      3    13    4    23  Subscriber  Female   \n",
       "3     6537548  13518902  2017      3    13    4    23  Subscriber    Male   \n",
       "4     6537549  13518901  2017      3    13    4    23  Subscriber  Female   \n",
       "\n",
       "             starttime       ...       from_station_id  \\\n",
       "0  2017-03-31 23:59:07       ...                    66   \n",
       "1  2017-03-31 23:56:25       ...                   199   \n",
       "2  2017-03-31 23:55:33       ...                   520   \n",
       "3  2017-03-31 23:54:46       ...                   110   \n",
       "4  2017-03-31 23:53:33       ...                   327   \n",
       "\n",
       "             from_station_name  latitude_start longitude_start  \\\n",
       "0         Clinton St & Lake St       41.885637      -87.641823   \n",
       "1       Wabash Ave & Grand Ave       41.890912      -87.626804   \n",
       "2   Greenview Ave & Jarvis Ave       42.015962      -87.668570   \n",
       "3        Dearborn St & Erie St       41.893992      -87.629318   \n",
       "4  Sheffield Ave & Webster Ave       41.921540      -87.653818   \n",
       "\n",
       "   dpcapacity_start to_station_id                to_station_name  \\\n",
       "0              23.0           171          May St & Cullerton St   \n",
       "1              15.0            26       McClurg Ct & Illinois St   \n",
       "2              23.0           432            Clark St & Lunt Ave   \n",
       "3              23.0           142           McClurg Ct & Erie St   \n",
       "4              19.0           331  Halsted St & Blackhawk St (*)   \n",
       "\n",
       "   latitude_end  longitude_end  dpcapacity_end  \n",
       "0     41.855136     -87.654127            11.0  \n",
       "1     41.891020     -87.617300            31.0  \n",
       "2     42.009074     -87.674190            19.0  \n",
       "3     41.894503     -87.617854            31.0  \n",
       "4     41.908537     -87.648627            20.0  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#since the data for 4 years is huge, we are using only 2017 data to perform our analysis\n",
    "datan=data[data['year']==2017]\n",
    "datan.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>trip_id</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>day</th>\n",
       "      <th>hour</th>\n",
       "      <th>usertype</th>\n",
       "      <th>gender</th>\n",
       "      <th>starttime</th>\n",
       "      <th>stoptime</th>\n",
       "      <th>tripduration</th>\n",
       "      <th>...</th>\n",
       "      <th>from_station_id</th>\n",
       "      <th>from_station_name</th>\n",
       "      <th>latitude_start</th>\n",
       "      <th>longitude_start</th>\n",
       "      <th>dpcapacity_start</th>\n",
       "      <th>to_station_id</th>\n",
       "      <th>to_station_name</th>\n",
       "      <th>latitude_end</th>\n",
       "      <th>longitude_end</th>\n",
       "      <th>dpcapacity_end</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>385358</th>\n",
       "      <td>12979231</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>Male</td>\n",
       "      <td>2017-01-01 00:02:54</td>\n",
       "      <td>2017-01-01 00:08:21</td>\n",
       "      <td>5.450000</td>\n",
       "      <td>...</td>\n",
       "      <td>28</td>\n",
       "      <td>Larrabee St &amp; Menomonee St</td>\n",
       "      <td>41.914680</td>\n",
       "      <td>-87.643320</td>\n",
       "      <td>15.0</td>\n",
       "      <td>20</td>\n",
       "      <td>Sheffield Ave &amp; Kingsbury St</td>\n",
       "      <td>41.910522</td>\n",
       "      <td>-87.653106</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>385357</th>\n",
       "      <td>12979232</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>Male</td>\n",
       "      <td>2017-01-01 00:06:06</td>\n",
       "      <td>2017-01-01 00:18:31</td>\n",
       "      <td>12.416667</td>\n",
       "      <td>...</td>\n",
       "      <td>620</td>\n",
       "      <td>Orleans St &amp; Chestnut St (NEXT Apts)</td>\n",
       "      <td>41.898203</td>\n",
       "      <td>-87.637536</td>\n",
       "      <td>15.0</td>\n",
       "      <td>333</td>\n",
       "      <td>Ashland Ave &amp; Blackhawk St</td>\n",
       "      <td>41.907066</td>\n",
       "      <td>-87.667252</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>385356</th>\n",
       "      <td>12979233</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>Male</td>\n",
       "      <td>2017-01-01 00:07:28</td>\n",
       "      <td>2017-01-01 00:12:51</td>\n",
       "      <td>5.383333</td>\n",
       "      <td>...</td>\n",
       "      <td>287</td>\n",
       "      <td>Franklin St &amp; Monroe St</td>\n",
       "      <td>41.880317</td>\n",
       "      <td>-87.635185</td>\n",
       "      <td>27.0</td>\n",
       "      <td>68</td>\n",
       "      <td>Clinton St &amp; Tilden St</td>\n",
       "      <td>41.875885</td>\n",
       "      <td>-87.640795</td>\n",
       "      <td>23.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>385355</th>\n",
       "      <td>12979234</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>Male</td>\n",
       "      <td>2017-01-01 00:07:57</td>\n",
       "      <td>2017-01-01 00:20:53</td>\n",
       "      <td>12.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>300</td>\n",
       "      <td>Broadway &amp; Barry Ave</td>\n",
       "      <td>41.937725</td>\n",
       "      <td>-87.644095</td>\n",
       "      <td>19.0</td>\n",
       "      <td>118</td>\n",
       "      <td>Sedgwick St &amp; North Ave</td>\n",
       "      <td>41.911386</td>\n",
       "      <td>-87.638677</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>385354</th>\n",
       "      <td>12979235</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>Male</td>\n",
       "      <td>2017-01-01 00:10:44</td>\n",
       "      <td>2017-01-01 00:21:27</td>\n",
       "      <td>10.716667</td>\n",
       "      <td>...</td>\n",
       "      <td>47</td>\n",
       "      <td>State St &amp; Kinzie St</td>\n",
       "      <td>41.889187</td>\n",
       "      <td>-87.627754</td>\n",
       "      <td>31.0</td>\n",
       "      <td>175</td>\n",
       "      <td>Wells St &amp; Polk St</td>\n",
       "      <td>41.872596</td>\n",
       "      <td>-87.633502</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         trip_id  year  month  day  hour    usertype gender  \\\n",
       "385358  12979231  2017      1    6     0  Subscriber   Male   \n",
       "385357  12979232  2017      1    6     0  Subscriber   Male   \n",
       "385356  12979233  2017      1    6     0  Subscriber   Male   \n",
       "385355  12979234  2017      1    6     0  Subscriber   Male   \n",
       "385354  12979235  2017      1    6     0  Subscriber   Male   \n",
       "\n",
       "                  starttime             stoptime  tripduration  \\\n",
       "385358  2017-01-01 00:02:54  2017-01-01 00:08:21      5.450000   \n",
       "385357  2017-01-01 00:06:06  2017-01-01 00:18:31     12.416667   \n",
       "385356  2017-01-01 00:07:28  2017-01-01 00:12:51      5.383333   \n",
       "385355  2017-01-01 00:07:57  2017-01-01 00:20:53     12.933333   \n",
       "385354  2017-01-01 00:10:44  2017-01-01 00:21:27     10.716667   \n",
       "\n",
       "             ...        from_station_id                     from_station_name  \\\n",
       "385358       ...                     28            Larrabee St & Menomonee St   \n",
       "385357       ...                    620  Orleans St & Chestnut St (NEXT Apts)   \n",
       "385356       ...                    287               Franklin St & Monroe St   \n",
       "385355       ...                    300                  Broadway & Barry Ave   \n",
       "385354       ...                     47                  State St & Kinzie St   \n",
       "\n",
       "        latitude_start longitude_start  dpcapacity_start  to_station_id  \\\n",
       "385358       41.914680      -87.643320              15.0             20   \n",
       "385357       41.898203      -87.637536              15.0            333   \n",
       "385356       41.880317      -87.635185              27.0             68   \n",
       "385355       41.937725      -87.644095              19.0            118   \n",
       "385354       41.889187      -87.627754              31.0            175   \n",
       "\n",
       "                     to_station_name  latitude_end longitude_end  \\\n",
       "385358  Sheffield Ave & Kingsbury St     41.910522    -87.653106   \n",
       "385357    Ashland Ave & Blackhawk St     41.907066    -87.667252   \n",
       "385356        Clinton St & Tilden St     41.875885    -87.640795   \n",
       "385355       Sedgwick St & North Ave     41.911386    -87.638677   \n",
       "385354            Wells St & Polk St     41.872596    -87.633502   \n",
       "\n",
       "        dpcapacity_end  \n",
       "385358            15.0  \n",
       "385357            15.0  \n",
       "385356            23.0  \n",
       "385355            19.0  \n",
       "385354            19.0  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datan=datan.sort_values('trip_id')\n",
    "datan=datan.drop(columns=['week'])\n",
    "datan=datan.drop(columns=['Unnamed: 0']) #dropping irrelevant columns\n",
    "datan=datan.sort_values('trip_id')\n",
    "datan.head()\n",
    "#Dropping the unecessary columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "datan=datan.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>trip_id</th>\n",
       "      <th>year</th>\n",
       "      <th>month</th>\n",
       "      <th>day</th>\n",
       "      <th>hour</th>\n",
       "      <th>usertype</th>\n",
       "      <th>gender</th>\n",
       "      <th>starttime</th>\n",
       "      <th>stoptime</th>\n",
       "      <th>tripduration</th>\n",
       "      <th>...</th>\n",
       "      <th>from_station_id</th>\n",
       "      <th>from_station_name</th>\n",
       "      <th>latitude_start</th>\n",
       "      <th>longitude_start</th>\n",
       "      <th>dpcapacity_start</th>\n",
       "      <th>to_station_id</th>\n",
       "      <th>to_station_name</th>\n",
       "      <th>latitude_end</th>\n",
       "      <th>longitude_end</th>\n",
       "      <th>dpcapacity_end</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12979231</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>Male</td>\n",
       "      <td>2017-01-01 00:02:54</td>\n",
       "      <td>2017-01-01 00:08:21</td>\n",
       "      <td>5.450000</td>\n",
       "      <td>...</td>\n",
       "      <td>28</td>\n",
       "      <td>Larrabee St &amp; Menomonee St</td>\n",
       "      <td>41.914680</td>\n",
       "      <td>-87.643320</td>\n",
       "      <td>15.0</td>\n",
       "      <td>20</td>\n",
       "      <td>Sheffield Ave &amp; Kingsbury St</td>\n",
       "      <td>41.910522</td>\n",
       "      <td>-87.653106</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12979232</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>Male</td>\n",
       "      <td>2017-01-01 00:06:06</td>\n",
       "      <td>2017-01-01 00:18:31</td>\n",
       "      <td>12.416667</td>\n",
       "      <td>...</td>\n",
       "      <td>620</td>\n",
       "      <td>Orleans St &amp; Chestnut St (NEXT Apts)</td>\n",
       "      <td>41.898203</td>\n",
       "      <td>-87.637536</td>\n",
       "      <td>15.0</td>\n",
       "      <td>333</td>\n",
       "      <td>Ashland Ave &amp; Blackhawk St</td>\n",
       "      <td>41.907066</td>\n",
       "      <td>-87.667252</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12979233</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>Male</td>\n",
       "      <td>2017-01-01 00:07:28</td>\n",
       "      <td>2017-01-01 00:12:51</td>\n",
       "      <td>5.383333</td>\n",
       "      <td>...</td>\n",
       "      <td>287</td>\n",
       "      <td>Franklin St &amp; Monroe St</td>\n",
       "      <td>41.880317</td>\n",
       "      <td>-87.635185</td>\n",
       "      <td>27.0</td>\n",
       "      <td>68</td>\n",
       "      <td>Clinton St &amp; Tilden St</td>\n",
       "      <td>41.875885</td>\n",
       "      <td>-87.640795</td>\n",
       "      <td>23.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12979234</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>Male</td>\n",
       "      <td>2017-01-01 00:07:57</td>\n",
       "      <td>2017-01-01 00:20:53</td>\n",
       "      <td>12.933333</td>\n",
       "      <td>...</td>\n",
       "      <td>300</td>\n",
       "      <td>Broadway &amp; Barry Ave</td>\n",
       "      <td>41.937725</td>\n",
       "      <td>-87.644095</td>\n",
       "      <td>19.0</td>\n",
       "      <td>118</td>\n",
       "      <td>Sedgwick St &amp; North Ave</td>\n",
       "      <td>41.911386</td>\n",
       "      <td>-87.638677</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12979235</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>Subscriber</td>\n",
       "      <td>Male</td>\n",
       "      <td>2017-01-01 00:10:44</td>\n",
       "      <td>2017-01-01 00:21:27</td>\n",
       "      <td>10.716667</td>\n",
       "      <td>...</td>\n",
       "      <td>47</td>\n",
       "      <td>State St &amp; Kinzie St</td>\n",
       "      <td>41.889187</td>\n",
       "      <td>-87.627754</td>\n",
       "      <td>31.0</td>\n",
       "      <td>175</td>\n",
       "      <td>Wells St &amp; Polk St</td>\n",
       "      <td>41.872596</td>\n",
       "      <td>-87.633502</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    trip_id  year  month  day  hour    usertype gender            starttime  \\\n",
       "0  12979231  2017      1    6     0  Subscriber   Male  2017-01-01 00:02:54   \n",
       "1  12979232  2017      1    6     0  Subscriber   Male  2017-01-01 00:06:06   \n",
       "2  12979233  2017      1    6     0  Subscriber   Male  2017-01-01 00:07:28   \n",
       "3  12979234  2017      1    6     0  Subscriber   Male  2017-01-01 00:07:57   \n",
       "4  12979235  2017      1    6     0  Subscriber   Male  2017-01-01 00:10:44   \n",
       "\n",
       "              stoptime  tripduration       ...        from_station_id  \\\n",
       "0  2017-01-01 00:08:21      5.450000       ...                     28   \n",
       "1  2017-01-01 00:18:31     12.416667       ...                    620   \n",
       "2  2017-01-01 00:12:51      5.383333       ...                    287   \n",
       "3  2017-01-01 00:20:53     12.933333       ...                    300   \n",
       "4  2017-01-01 00:21:27     10.716667       ...                     47   \n",
       "\n",
       "                      from_station_name  latitude_start longitude_start  \\\n",
       "0            Larrabee St & Menomonee St       41.914680      -87.643320   \n",
       "1  Orleans St & Chestnut St (NEXT Apts)       41.898203      -87.637536   \n",
       "2               Franklin St & Monroe St       41.880317      -87.635185   \n",
       "3                  Broadway & Barry Ave       41.937725      -87.644095   \n",
       "4                  State St & Kinzie St       41.889187      -87.627754   \n",
       "\n",
       "   dpcapacity_start  to_station_id               to_station_name  \\\n",
       "0              15.0             20  Sheffield Ave & Kingsbury St   \n",
       "1              15.0            333    Ashland Ave & Blackhawk St   \n",
       "2              27.0             68        Clinton St & Tilden St   \n",
       "3              19.0            118       Sedgwick St & North Ave   \n",
       "4              31.0            175            Wells St & Polk St   \n",
       "\n",
       "   latitude_end longitude_end  dpcapacity_end  \n",
       "0     41.910522    -87.653106            15.0  \n",
       "1     41.907066    -87.667252            15.0  \n",
       "2     41.875885    -87.640795            23.0  \n",
       "3     41.911386    -87.638677            19.0  \n",
       "4     41.872596    -87.633502            19.0  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datan=datan.drop('index',axis=1)\n",
    "datan.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## EXPLORATORY DATA ANALYSIS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x19eac08b0b8>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x = 'month', y = datan['trip_id'].value_counts(), data = datan)\n",
    "sns.countplot(x='month', data=datan)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>THE ABOVE GRAPH PLOTS THE COUNT OF TRIPS VS MONTHS</b><br>The highest number of trips is during the <b>summer</b> as is evident from the graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x19eac16ab70>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='day', data=datan)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>THE ABOVE GRAPH PLOTS THE COUNT OF TRIPS VS DAY OF THE WEEK</b><br>We can see that the weekdays see more number of trips as compared to the weekend"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x19ea86c0f60>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='hour', data=datan)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<B>THE ABOVE GRAPH PLOTS THE COUNT OF TRIPS VS EACH HOUR OF THE DAY</B><br>We can see that there is a peak in the number of trips during the times from <b>7-9 am</b> in the morning and <b>4-7 pm</b> in the Evening"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x19eac1e7940>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='gender', data=datan)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<B>THE ABOVE GRAPH PLOTS THE NUMBER OF CUSTOMERS VS THEIR GENDER</B><BR>We can see that the number of men are nearly <b>3</b> times the number of females"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x19eac2d8d68>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='usertype', data=datan)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>usertype</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Customer</th>\n",
       "      <td>832.0</td>\n",
       "      <td>1.466081e+07</td>\n",
       "      <td>9.571017e+05</td>\n",
       "      <td>13029459.0</td>\n",
       "      <td>13909583.25</td>\n",
       "      <td>14633857.0</td>\n",
       "      <td>15307080.75</td>\n",
       "      <td>16718229.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dependent</th>\n",
       "      <td>4.0</td>\n",
       "      <td>1.324131e+07</td>\n",
       "      <td>1.238093e+05</td>\n",
       "      <td>13070858.0</td>\n",
       "      <td>13191518.00</td>\n",
       "      <td>13272626.0</td>\n",
       "      <td>13322420.50</td>\n",
       "      <td>13349140.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Subscriber</th>\n",
       "      <td>2956854.0</td>\n",
       "      <td>1.528700e+07</td>\n",
       "      <td>1.358794e+06</td>\n",
       "      <td>12979231.0</td>\n",
       "      <td>14073315.25</td>\n",
       "      <td>15305569.0</td>\n",
       "      <td>16503471.75</td>\n",
       "      <td>17536701.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                count          mean           std         min          25%  \\\n",
       "usertype                                                                     \n",
       "Customer        832.0  1.466081e+07  9.571017e+05  13029459.0  13909583.25   \n",
       "Dependent         4.0  1.324131e+07  1.238093e+05  13070858.0  13191518.00   \n",
       "Subscriber  2956854.0  1.528700e+07  1.358794e+06  12979231.0  14073315.25   \n",
       "\n",
       "                   50%          75%         max  \n",
       "usertype                                         \n",
       "Customer    14633857.0  15307080.75  16718229.0  \n",
       "Dependent   13272626.0  13322420.50  13349140.0  \n",
       "Subscriber  15305569.0  16503471.75  17536701.0  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "databyUserType=datan.groupby(\"usertype\")\n",
    "databyUserType[\"trip_id\"].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig=datan.boxplot(by='gender',column=['tripduration'],grid=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>From the above boxplot we can observe that the average duration of trips of females is higher when compared to males"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x19eba5b2a90>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='events', data=datan)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Since the city in consideration, Chicago is cloudy almost the entire year, it is quite obvious that most of the trips will be during cloudy conditions "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Calculating The Distance between the Starting and End Locations of the Trip using Latitude & Longitude"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# approximate radius of earth in km\n",
    "def dis(row):\n",
    "    R = 6373.0\n",
    "    \n",
    "    lat1 = radians(row['latitude_start'])\n",
    "    lon1 = radians(row['longitude_start'])\n",
    "    lat2 = radians(row['latitude_end'])\n",
    "    lon2 = radians(row['longitude_end'])\n",
    "\n",
    "    dlon = lon2 - lon1\n",
    "    dlat = lat2 - lat1\n",
    "\n",
    "    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n",
    "    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n",
    "\n",
    "    distance = (R * c)*0.621371 #converting to miles\n",
    "    return str(distance)\n",
    "\n",
    "#time to run this code in seconds\n",
    "t5=time.time()\n",
    "datan['Distance_Covered']=datan.apply(dis,axis=1)\n",
    "t6=time.time()\n",
    "print(\"Time to run this code\")\n",
    "print(t6-t5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> Converting Latitude & Longitude to float type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def convertToFloat(x):\n",
    "    try:\n",
    "        x = float(x)\n",
    "    except Exception:\n",
    "        x = None\n",
    "    return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "datan[\"latitude_start\"] = datan[\"latitude_start\"].apply(convertToFloat)\n",
    "datan[\"longitude_start\"] = datan[\"longitude_start\"].apply(convertToFloat)\n",
    "datan[\"latitude_end\"] = datan[\"latitude_end\"].apply(convertToFloat)\n",
    "datan[\"longitude_end\"] = datan[\"longitude_end\"].apply(convertToFloat)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> CREATING DUMMY VARIABLES FOR CATEGORICAL VARIABLES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dummy_gender = pd.get_dummies(datan['gender'])\n",
    "print(dummy_gender.head()) # CREATING DUMMY VARIABLES FOR GENDER"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "datan.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_full = datan.join(dummy_gender)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_for_plot=data_full.drop([\"year\",\"Female\",\"latitude_start\",\"longitude_start\",\"latitude_end\",\"longitude_end\"],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "data_for_plot.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SAMPLING (To reduce the run time of code & make it more efficient)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSampling=data_for_plot.sample(frac=0.01) #We are sampling the data so that we can run the linear regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "len(dataSampling) #size of our sample data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> PLOTTING CORRELATION MATRIX TO IDENTIFY THE CORRELATION AMONG INDEPENDENT VARIABLES"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "corr = round(dataSampling.corr(),2)\n",
    "corr.style.background_gradient()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The below cell will take a while to run \n",
    "<br><b>It will plot a pairplot among all the columns to identify any possible correlation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#ts=time.time()\n",
    "#g = sns.pairplot(dataSampling) #The pair plot which give us the opportunity to learn about the relation about all the variables and tp come up with variables showing important trends\n",
    "#te=time.time()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#print(\"The time taken to plot the graph:\",(te=ts))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SINGLE VARIABLE REGRESSION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "databytemperature=data_full.groupby([\"temperature\"]) #grouping the samples based on temperature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_temp=databytemperature[\"trip_id\"].count() #COunting the number of trips based on temperature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Temp_X=data_temp.index #Storing the indexes of  of data_temp described above as independent variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Temp_Y=data_temp.values #Storing the values of  of data_temp described above as dependent variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> Temperature vs Number of trips"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Temp_result = sm.ols(formula=\"Temp_Y ~ Temp_X\", data=databytemperature).fit() #Running the linear regression of number of trips on temperature\n",
    "print(Temp_result.summary()) #Printing the summary results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>The regresion model has a p value of 0.000 which is less than the level of significance, which shows the influence of number of trips on temperature. However the R Squared Value is not that high which specifies that the model is not that efficient. There can be seen a positive correlation here.</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_tripduration=data_full['tripduration'].values #Storing the values of trip duration and taking it as the dependent variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_tripduration_temp=data_full['temperature'].values #Storing the values of temperature and taking it as independent variable\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> Trip duration vs temperature (Single-variable regression)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Temp_trip_result = sm.ols(formula=\"data_tripduration ~ data_tripduration_temp\", data=data_full).fit() #Runnig regression of trip duration on temperature\n",
    "print(Temp_trip_result.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>The regresion model has a p value of 0.000 which is less than the level of significance. However the R Squared Value is very less which specifies that the model is not efficient. There can be seen a positive correlation here.</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_dist=data_full['temperature'].values #Storing the values of temperature and taking it as the dependent variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_temp=data_full['Distance_Covered'].values #Storing the values of disatance covered and taking it as the independent variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#Temp_dist_result = sm.ols(formula=\"Y_temp ~ X_dist\", data=data_full).fit() #Running regression of temperature on distance\n",
    "#print(Temp_dist_result.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>The regresion model has a p value of 0.000 which is less than the level of significance. However the R Squared Value is very less which specifies that the model is not efficient. There can be seen a positive correlation here.</b>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>We can see that the linear regression is not efficient and to have a better analysis we need to go for multile regression and clustering.</b>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>To apply clustering, we take some attributes such as gender, distance, time and gender to come with the prediction of types of customers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSampling[\"rushhour\"]=0 #Creating an attribute of rush hour which to store the dummy variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSampling[\"weekend\"]=0 #Creating an attribute of weekend which to store the dummy variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSampling[\"distance_2\"]=0 #Creating an attribute of distance_2 which to store the dummy variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "dataSampling.head() #This is how the dataframe looks like"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## K-MEANS CLUSTERING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSampling[\"Cluster\"]=0 #Creating one more attribute to store the number of clusters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def tagrushhour(x):  #Defining a function to categorize the number of hours into rush hours and non rush hours  \n",
    "    if (x>=7 and x<=10) or (x>=16 and x<=19): #If rush hours (between 7am to 10 am and 4pm to 7 pm)\n",
    "        x=1 #Assign x =1\n",
    "    else: #If non rush hours\n",
    "        x=0 #Assign x=0\n",
    "    return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSampling.rushhour=list(map(tagrushhour,dataSampling.hour.values)) #Using map to apply the tagrush hour function to the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSampling.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def tagweek(x): #Defining a function to categorize the number of days into working days and weekend\n",
    "    if (x>=0 and x<=4): #If days are the working days i.e from monday to friday\n",
    "        x=0 #Assign x equals 0\n",
    "    else: #If days are of weekends i.e Saturday and Sunday\n",
    "        x=1 #Assign x equals 1\n",
    "    return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSampling[\"Distance_Covered\"] = dataSampling[\"Distance_Covered\"].apply(convertToFloat) # Converting distance covered to float type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSampling.weekend=list(map(tagweek,dataSampling.day.values)) #Using map to apply the tagweek function to the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSampling.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "dataSamplingCluster=dataSampling[['Male','rushhour','weekend']].copy()\n",
    "dataSamplingCluster"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Using other libraries\n",
    "from sklearn.cluster import KMeans\n",
    "\n",
    "#Determining number of clusters\n",
    "nClusters=range(2,10)\n",
    "sumDistances=[]\n",
    "for n in nClusters:\n",
    "    kmeans=KMeans(n_clusters=n).fit(dataSamplingCluster)\n",
    "    sumDistances.append(kmeans.inertia_) #Proxy for SSE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting the Elbow Plot \n",
    "plt.plot(nClusters,sumDistances,'-')\n",
    "plt.xlabel('nClusters')\n",
    "plt.ylabel('Sum Of Distances')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>The above elbow curve shows that there is 6 or 8 number of clusters to be made. This has been made without taking the categorical distance into consideration. Now we will take distace into consideration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "kmeans=KMeans(n_clusters=8).fit(dataSamplingCluster)\n",
    "\n",
    "dataSampling['Cluster']=kmeans.labels_\n",
    "#g = sns.pairplot(data,hue='Cluster')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSampling.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSamplingCluster.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "g = sns.pairplot(dataSampling,hue='Cluster')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSampling.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def tagdistance(x): #Function to categorize the distance\n",
    "    if (x<=2): #If the distance is less than or equal to 2 miles\n",
    "        x=1 #Assign x equals 1\n",
    "    else: #If the distance is more than 2 miles\n",
    "        x=0 #Assign x equals 2\n",
    "    return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSampling.distance_2=list(map(tagdistance,dataSampling.Distance_Covered.values))  #Using map to apply the tagdistance function to the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSampling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSamplingCluster_dist=dataSampling[['Male','rushhour','weekend','distance_2']].copy() #Taking only the categorical and influential attributes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSamplingCluster_dist.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Using other libraries\n",
    "from sklearn.cluster import KMeans\n",
    "\n",
    "#Determining number of clusters\n",
    "nClusters=range(2,10)\n",
    "sumDistances=[]\n",
    "for n in nClusters:\n",
    "    kmeans=KMeans(n_clusters=n).fit(dataSamplingCluster_dist)\n",
    "    sumDistances.append(kmeans.inertia_) #Proxy for SSE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> Plotting K-means cluster adding Distance covered to the existing variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Plotting the elbow curve to determine the number of clusters\n",
    "plt.plot(nClusters,sumDistances,'-')\n",
    "plt.xlabel('nClusters')\n",
    "plt.ylabel('Sum Of Distances')\n",
    "plt.title(\"To determine the number of clusters\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>The above elbow curve shows that there are 3 number of clusters to be made which implies that distance plays an important role. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "kmeans=KMeans(n_clusters=3).fit(dataSamplingCluster_dist)\n",
    "\n",
    "dataSampling['Cluster_1']=kmeans.labels_\n",
    "#g = sns.pairplot(data,hue='Cluster')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSampling.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSampling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSampling_cols_to_keep=dataSampling[[\"trip_id\",\"tripduration\",\"temperature\",\"Distance_Covered\",\"Male\",\"Cluster_1\"]].copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "dataSampling_cols_to_keep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "g = sns.pairplot(dataSampling_cols_to_keep,hue='Cluster_1',markers=[\"o\",\"s\",\"D\"],kind='reg')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## MULTI VARIABLE LINEAR REGRESSION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSampling1=datan.sample(frac=0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSampling1=dataSampling1.sort_values('trip_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "dataSampling1=dataSampling1.reset_index()\n",
    "dataSampling1=dataSampling1.drop(columns=['index'],axis=1)\n",
    "dataSampling1.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> Creating new column 'Rush hour' to store rush hour(1)/non-rush hour data(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def rush(row):\n",
    "    r=0\n",
    "    if (row.hour>=7 and row.hour<=10) or (row.hour>=16 and row.hour<=19):\n",
    "        r=1\n",
    "    else:\n",
    "        r=0\n",
    "    return(r)\n",
    "dataSampling1['Rush_Hour']=dataSampling1.apply(rush,axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> Creating new column 'Weekday_Weekend' to store weekday(1) and weekend(0) information"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def wday(row):\n",
    "    r=0\n",
    "    if row.day<=4:\n",
    "        r=1\n",
    "    elif row.day>4 and row.day<7:\n",
    "        r=0\n",
    "    return r\n",
    "dataSampling1['Weekday_Weekend']=dataSampling1.apply(wday,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataSampling1.groupby(\"starttime\").head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime\n",
    "\n",
    "def getFullDate(row):\n",
    "    temp = row[\"starttime\"].split(\" \")\n",
    "    date=temp[0]\n",
    "    date=date.replace('-','/')\n",
    "    date=datetime.datetime.strptime(date,\"%Y/%m/%d\")\n",
    "    return date\n",
    "\n",
    "\n",
    "dataSampling1[\"Date\"] = dataSampling1.apply(getFullDate, axis=1) #.apply() function applies function along input axis of DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp1=dataSampling1\n",
    "temp2=dataSampling1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rel_cols1=[\"Date\",\"Distance_Covered\",\"temperature\",\"tripduration\",\"Weekday_Weekend\"]\n",
    "rel_cols2=[\"Date\",\"trip_id\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp1=temp1[rel_cols1]\n",
    "temp2=temp2[rel_cols2]\n",
    "temp2.trip_id=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp1[\"Distance_Covered\"] = temp1[\"Distance_Covered\"].apply(convertToFloat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x=temp1.groupby('Date').agg('mean')\n",
    "y=temp2.groupby('Date').agg('sum')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp1=temp1.merge(temp2)\n",
    "temp1=temp1.drop_duplicates(\"Date\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp1=temp1.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "temp1.drop(\"index\",axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for d in temp1.index.values:\n",
    "    temp1['Distance_Covered'][d]=x['Distance_Covered'][d]\n",
    "    temp1['temperature'][d]=x['temperature'][d]\n",
    "    temp1['tripduration'][d]=x['tripduration'][d]\n",
    "    temp1['Weekday_Weekend'][d]=x['Weekday_Weekend'][d]\n",
    "    temp1['trip_id'][d]=y['trip_id'][d]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp1=temp1.drop(\"index\",axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> DISTANCE COVERED(Y) VS TEMPERATURE, WEEKEND/WEEKDAY, TRIP DURATION (MULTI LINEAR REGRESSION)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "result = sm.ols(formula=\"Distance_Covered ~ temperature + Weekday_Weekend + tripduration \", data=temp1).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "print(result.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> DISTANCE COVERED is highly correlated to TEMPERATURE, WEEKEND/WEEKDAY, TRIP DURATION with an R-sq value of 78% and has a significant relations with 0 p-value"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> NUMBER OF TRIPS(Y) VS TEMPERATURE, WEEKEND/WEEKDAY (MULTI LINEAR REGRESSION)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "result = sm.ols(formula=\"trip_id~ temperature + Weekday_Weekend \", data=temp1).fit()\n",
    "print(result.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b> #Trips is highly correlated to TEMPERATURE, WEEKEND/WEEKDAY with an R-sq value of 78% and has a significant relations with 0 p-value"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CHICAGO MAP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "map_wl = folium.Map(location=[41.881832, -87.623177])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PLOTTING THE STATIONS ON THE MAP OF CHICAGO"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<B>ORIGINALLY WE PLOTTED THE MAP USING A DICTIONARY, WHERE EACH TUPLE OF LATITUDE AND LONGITUDE IS A KEY AND THE VALUE WAS TO MEASURE WHETHER IT WAS PLOTTED OR NOT <BR> AS IT WAS NOT EFFICIENT IN TERMS OF TIME REQUIRED. SO WE DROPPED THE DUPLICATES AND PLOTTED THE SAME MAP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_map_all = folium.Map(location=[41.881832, -87.623177], zoom_start=15)\n",
    "tempdf=datan\n",
    "tempdf=tempdf.drop_duplicates(subset='from_station_name', keep=\"last\")\n",
    "tempdf=tempdf.reset_index()\n",
    "tempdf=tempdf.drop(columns=\"index\")\n",
    "for d in tempdf.index.values:\n",
    "    points=[]\n",
    "    points.append(tuple([tempdf.latitude_start[d],tempdf.longitude_start[d]]))\n",
    "    folium.Marker(points[0],icon=folium.Icon(color='blue'),popup=datan.from_station_name[d]).add_to(my_map_all)\n",
    "my_map_all.save(\"All Stations.html\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_map_all"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PLOTTING THE TOP 5 STATIONS "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_map = folium.Map(location=[41.881832, -87.623177], zoom_start=15)\n",
    "c=0\n",
    "for d in tempdf.index.values:\n",
    "    if tempdf.from_station_name[d]=='Canal St & Adams St' or tempdf.from_station_name[d]=='Clinton St & Washington Blvd'\\\n",
    "        or tempdf.from_station_name[d]=='Clinton St & Madison St' or tempdf.from_station_name[d]=='Kingsbury St & Kinzie St'\\\n",
    "        or tempdf.from_station_name[d]=='Franklin St & Monroe St' and c<5:\n",
    "        points=[]\n",
    "        points.append(tuple([tempdf.latitude_start[d],tempdf.longitude_start[d]]))\n",
    "        folium.Marker(points[0],icon=folium.Icon(color='blue'),popup=datan.from_station_name[d]).add_to(my_map)\n",
    "        c+=1\n",
    "    \n",
    "# Load map centred on average coordinates\n",
    " \n",
    "#add a markers\n",
    " \n",
    "#fadd lines\n",
    " \n",
    "# Save map\n",
    "my_map.save(\"Top 5 Stations.html\")\n",
    "my_map"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# HEATMAP OF THE STATIONS DURING PEAK/RUSH HOURS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "stops_heatmap = folium.Map(location=[41.881832, -87.623177], zoom_start=15)\n",
    "for name, row in datan.iloc[:1000].iterrows():\n",
    "    if (row.hour>=7 and row.hour<=10) or (row.hour>=7 and row.hour<=10):\n",
    "        stops_heatmap.add_child(plugins.HeatMap([[row[\"latitude_start\"], row[\"longitude_start\"]]]))\n",
    "stops_heatmap.save(\"heatmapfav.html\")\n",
    "stops_heatmap"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ROUTES FROM TOP 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_map_fav = folium.Map(location=[41.881832, -87.623177], zoom_start=14)\n",
    "c1=0\n",
    "c2=0\n",
    "c3=0\n",
    "c4=0\n",
    "c5=0\n",
    "for d in datan.index.values:\n",
    "    if(c1<=5 or c2<=5 or c3<=5 or c4<=5 or c5<=5) and ((datan.hour[d]>=7 and datan.hour[d]<=10) or (datan.hour[d]>=7 and datan.hour[d]<=10)): \n",
    "        if datan.from_station_name[d]=='Canal St & Adams St' or datan.from_station_name[d]=='Clinton St & Washington Blvd'\\\n",
    "        or datan.from_station_name[d]=='Clinton St & Madison St' or datan.from_station_name[d]=='Kingsbury St & Kinzie St'\\\n",
    "        or datan.from_station_name[d]=='Franklin St & Monroe St':\n",
    "            points=[]\n",
    "            points.append(tuple([datan.latitude_start[d],datan.longitude_start[d]]))\n",
    "            points.append(tuple([datan.latitude_end[d],datan.longitude_end[d]]))\n",
    "            i=1\n",
    "            for each in points:  \n",
    "                if datan.from_station_name[d]=='Canal St & Adams St' and c1<=5:\n",
    "                    if(i%2==0):\n",
    "                        folium.Marker(each,icon=folium.Icon(color='red')).add_to(my_map_fav)\n",
    "                        folium.PolyLine(points, color=\"red\", weight=2.5, opacity=1).add_to(my_map_fav)\n",
    "                        c1+=1\n",
    "                    else:\n",
    "                        i+=1\n",
    "                        folium.Marker(each,icon=folium.Icon(color='blue'),popup='Canal St & Adams St').add_to(my_map_fav)\n",
    "                        folium.PolyLine(points, color=\"red\", weight=2.5, opacity=1).add_to(my_map_fav)\n",
    "                elif datan.from_station_name[d]=='Clinton St & Washington Blvd' and c2<=5:\n",
    "                    if(i%2==0):\n",
    "                        folium.Marker(each,icon=folium.Icon(color='red')).add_to(my_map_fav)\n",
    "                        folium.PolyLine(points, color=\"red\", weight=2.5, opacity=1).add_to(my_map_fav)\n",
    "                        c2+=1\n",
    "                    else:\n",
    "                        i+=1\n",
    "                        folium.Marker(each,icon=folium.Icon(color='blue'),popup='Clinton St & Washington Blvd').add_to(my_map_fav)\n",
    "                        folium.PolyLine(points, color=\"red\", weight=2.5, opacity=1).add_to(my_map_fav)\n",
    "                elif datan.from_station_name[d]=='Kingsbury St & Kinzie St' and c3<=5:\n",
    "                    if(i%2==0):\n",
    "                        folium.Marker(each,icon=folium.Icon(color='red')).add_to(my_map_fav)\n",
    "                        folium.PolyLine(points, color=\"red\", weight=2.5, opacity=1).add_to(my_map_fav)\n",
    "                        c3+=1\n",
    "                    else:\n",
    "                        i+=1\n",
    "                        folium.Marker(each,icon=folium.Icon(color='blue'),popup='Kingsbury St & Kinzie St').add_to(my_map_fav)\n",
    "                        folium.PolyLine(points, color=\"red\", weight=2.5, opacity=1).add_to(my_map_fav)\n",
    "                elif datan.from_station_name[d]=='Franklin St & Monroe St' and c4<=5:\n",
    "                    if(i%2==0):\n",
    "                        folium.Marker(each,icon=folium.Icon(color='red')).add_to(my_map_fav)\n",
    "                        folium.PolyLine(points, color=\"red\", weight=2.5, opacity=1).add_to(my_map_fav)\n",
    "                        c4+=1\n",
    "                    else:\n",
    "                        i+=1\n",
    "                        folium.Marker(each,icon=folium.Icon(color='blue'),popup='Franklin St & Monroe St').add_to(my_map_fav)\n",
    "                        folium.PolyLine(points, color=\"red\", weight=2.5, opacity=1).add_to(my_map_fav)\n",
    "                elif datan.from_station_name[d]=='Clinton St & Madison St' and c5<=5:\n",
    "                    if(i%2==0):\n",
    "                        folium.Marker(each,icon=folium.Icon(color='red')).add_to(my_map_fav)\n",
    "                        folium.PolyLine(points, color=\"red\", weight=2.5, opacity=1).add_to(my_map_fav)\n",
    "                        c5+=1\n",
    "                    else:\n",
    "                        i+=1\n",
    "                        folium.Marker(each,icon=folium.Icon(color='indigo'),popup='Clinton St & Madison St').add_to(my_map_fav)\n",
    "                        folium.PolyLine(points, color=\"red\", weight=2.5, opacity=1).add_to(my_map_fav)\n",
    "my_map_fav.save(\"Rush Hour Routes starting From Top 5 Stations.html\")\n",
    "my_map_fav"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# HEAT MAP OF THE STATIONS IN CHICAGO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "stops_heatmap = folium.Map(location=[41.881832, -87.623177], zoom_start=16)\n",
    "stops_heatmap.add_child(plugins.HeatMap([[row[\"latitude_start\"], row[\"longitude_start\"]] for name, row in datan.iloc[:1000].iterrows()]))\n",
    "stops_heatmap.save(\"heatmap.html\")\n",
    "stops_heatmap"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Most popular starting point"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "x=datan.groupby('from_station_name')\n",
    "y=x.trip_id.count().sort_values(ascending=False)\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# WE'RE PLOTTING JOURNEYS THAT ORIGINATED FROM <BR>THE TOP 5 POPULAR STATIONS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_map_fav = folium.Map(location=[41.881832, -87.623177], zoom_start=14)\n",
    "c=0\n",
    "for d in datan.index.values:\n",
    "    if(c<=5000):\n",
    "        if datan.from_station_name[d]=='Canal St & Adams St' or datan.from_station_name[d]=='Clinton St & Washington Blvd'\\\n",
    "        or datan.from_station_name[d]=='Clinton St & Madison St' or datan.from_station_name[d]=='Kingsbury St & Kinzie St'\\\n",
    "        or datan.from_station_name[d]=='Franklin St & Monroe St':\n",
    "            points=[]\n",
    "            points.append(tuple([datan.latitude_start[d],datan.longitude_start[d]]))\n",
    "            points.append(tuple([datan.latitude_end[d],datan.longitude_end[d]]))\n",
    "            i=1\n",
    "            c+=1\n",
    "            for each in points:  \n",
    "                if datan.from_station_name[d]=='Canal St & Adams St':\n",
    "                    if(i%2==0):\n",
    "                        folium.Marker(each,icon=folium.Icon(color='red'),popup=datan.to_station_name[d]).add_to(my_map_fav)\n",
    "                        folium.PolyLine(points, color=\"black\", weight=2.5, opacity=1).add_to(my_map_fav)\n",
    "                    else:\n",
    "                        i+=1\n",
    "                        folium.Marker(each,icon=folium.Icon(color='black'),popup='Canal St & Adams St').add_to(my_map_fav)\n",
    "                        folium.PolyLine(points, color=\"black\", weight=2.5, opacity=1).add_to(my_map_fav)\n",
    "                elif datan.from_station_name[d]=='Clinton St & Washington Blvd':\n",
    "                    if(i%2==0):\n",
    "                        folium.Marker(each,icon=folium.Icon(color='red'),popup=datan.to_station_name[d]).add_to(my_map_fav)\n",
    "                        folium.PolyLine(points, color=\"blue\", weight=2.5, opacity=1).add_to(my_map_fav)\n",
    "                    else:\n",
    "                        i+=1\n",
    "                        folium.Marker(each,icon=folium.Icon(color='blue'),popup='Clinton St & Washington Blvd').add_to(my_map_fav)\n",
    "                        folium.PolyLine(points, color=\"blue\", weight=2.5, opacity=1).add_to(my_map_fav)\n",
    "                elif datan.from_station_name[d]=='Kingsbury St & Kinzie St':\n",
    "                    if(i%2==0):\n",
    "                        folium.Marker(each,icon=folium.Icon(color='red'),popup=datan.to_station_name[d]).add_to(my_map_fav)\n",
    "                        folium.PolyLine(points, color=\"green\", weight=2.5, opacity=1).add_to(my_map_fav)\n",
    "                    else:\n",
    "                        i+=1\n",
    "                        folium.Marker(each,icon=folium.Icon(color='green'),popup='Kingsbury St & Kinzie St').add_to(my_map_fav)\n",
    "                        folium.PolyLine(points, color=\"green\", weight=2.5, opacity=1).add_to(my_map_fav)\n",
    "                elif datan.from_station_name[d]=='Franklin St & Monroe St':\n",
    "                    if(i%2==0):\n",
    "                        folium.Marker(each,icon=folium.Icon(color='red'),popup=datan.to_station_name[d]).add_to(my_map_fav)\n",
    "                        folium.PolyLine(points, color=\"yellow\", weight=2.5, opacity=1).add_to(my_map_fav)\n",
    "                    else:\n",
    "                        i+=1\n",
    "                        folium.Marker(each,icon=folium.Icon(color='yellow'),popup='Franklin St & Monroe St').add_to(my_map_fav)\n",
    "                        folium.PolyLine(points, color=\"yellow\", weight=2.5, opacity=1).add_to(my_map_fav)\n",
    "                elif datan.from_station_name[d]=='Clinton St & Madison St':\n",
    "                    if(i%2==0):\n",
    "                        folium.Marker(each,icon=folium.Icon(color='red'),popup=datan.to_station_name[d]).add_to(my_map_fav)\n",
    "                        folium.PolyLine(points, color=\"indigo\", weight=2.5, opacity=1).add_to(my_map_fav)\n",
    "                    else:\n",
    "                        i+=1\n",
    "                        folium.Marker(each,icon=folium.Icon(color='indigo'),popup='Clinton St & Madison St').add_to(my_map_fav)\n",
    "                        folium.PolyLine(points, color=\"indigo\", weight=2.5, opacity=1).add_to(my_map_fav)\n",
    "my_map_fav.save(\"favroute.html\")\n",
    "my_map_fav"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## SURVEY SIMULATION  (We created a new design for females and this simulation shows the survey results if female riders are willing to use the service spost that or not)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "di={}\n",
    "di['Yes']=0\n",
    "di['No']=0\n",
    "di['Unsure']=0\n",
    "for i in range(10000):\n",
    "    pyes=np.random.uniform(0.3,0.35)\n",
    "    pno=np.random.uniform(0.20,0.25)\n",
    "    pud=1-(pyes+pno)\n",
    "    survey=np.random.choice(['Yes','No','Unsure'],p=[pyes,pno,pud],size=1)\n",
    "    for j in range(len(survey)):\n",
    "        di[survey[j]]+=1\n",
    "plt.bar(di.keys(),di.values(),width=0.1)\n",
    "print(di)\n",
    "t1=time.time()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TIME COMPLEXITY (TIME TO RUN THE ENTIRE CODE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"Time Required to run the entire notebook:\",(t1-t0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "t=[0.0]*3\n",
    "ctr=0\n",
    "x=[0.01,0.02,0.03]\n",
    "for d in x:\n",
    "    if ctr<3:\n",
    "        dataSampling3=datan.sample(frac=d)\n",
    "        dataSampling3=dataSampling3.sort_values('trip_id')\n",
    "        dataSampling3=dataSampling3.reset_index()\n",
    "        dataSampling3=dataSampling3.drop(columns=['index'],axis=1)\n",
    "        dataSampling3.head()\n",
    "        dataSampling3['Rush_Hour']=dataSampling3.apply(rush,axis=1)\n",
    "        dataSampling3['Weekday_Weekend']=dataSampling3.apply(wday,axis=1)\n",
    "        dataSampling3.groupby(\"starttime\").head()\n",
    "        dataSampling3[\"Date\"] = dataSampling3.apply(getFullDate, axis=1) #.apply() function applies function along input axis of DataFrame\n",
    "        t3=time.time()\n",
    "        temp1=dataSampling3\n",
    "        temp2=dataSampling3\n",
    "        rel_cols1=[\"Date\",\"Distance_Covered\",\"temperature\",\"tripduration\",\"Weekday_Weekend\"]\n",
    "        rel_cols2=[\"Date\",\"trip_id\"]\n",
    "        temp1=temp1[rel_cols1]\n",
    "        temp2=temp2[rel_cols2]\n",
    "        temp2.trip_id=1\n",
    "        temp1[\"Distance_Covered\"] = temp1[\"Distance_Covered\"].apply(convertToFloat)\n",
    "        x=temp1.groupby('Date').agg('mean')\n",
    "        y=temp2.groupby('Date').agg('sum')\n",
    "        temp1=temp1.merge(temp2)\n",
    "        temp1=temp1.drop_duplicates(\"Date\")\n",
    "        temp1=temp1.reset_index()\n",
    "        temp1.drop(\"index\",axis=1)\n",
    "        for d in temp1.index.values:\n",
    "            temp1['Distance_Covered'][d]=x['Distance_Covered'][d]\n",
    "            temp1['temperature'][d]=x['temperature'][d]\n",
    "            temp1['tripduration'][d]=x['tripduration'][d]\n",
    "            temp1['Weekday_Weekend'][d]=x['Weekday_Weekend'][d]\n",
    "            temp1['trip_id'][d]=y['trip_id'][d]\n",
    "        temp1=temp1.drop(\"index\",axis=1)\n",
    "        result = sm.ols(formula=\"Distance_Covered ~ temperature + Weekday_Weekend + tripduration \", data=temp1).fit()\n",
    "        #print(\"Sample size\",d,\"\\n\",result.summary())\n",
    "        result = sm.ols(formula=\"trip_id~ temperature + Weekday_Weekend \", data=temp1).fit()\n",
    "        #print(\"Sample size\",d,\"\\n\",result.summary())\n",
    "        result = sm.ols(formula=\"tripduration ~ temperature + Weekday_Weekend \", data=temp1).fit()\n",
    "        #print(\"Sample size\",d,\"\\n\",result.summary())\n",
    "        t4=time.time()\n",
    "        t[ctr]=t4-t3\n",
    "        ctr+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"Time Required for Sample sizes 1x,2x and 3x is\",(t),\" seconds\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
